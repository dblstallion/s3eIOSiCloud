/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "s3eIOSiCloud.h"


// For MIPs (and WP8) platform we do not have asm code for stack switching 
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*s3eIOSiCloudRegister_t)(s3eIOSiCloudCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*s3eIOSiCloudUnRegister_t)(s3eIOSiCloudCallback cbid, s3eCallback fn);
typedef  s3eResult(*s3eIOSiCloudStart_t)(const char* fileName, s3eBool supportConflictResolution);
typedef       void(*s3eIOSiCloudStop_t)();
typedef       void(*s3eIOSiCloudTick_t)();
typedef  s3eResult(*s3eIOSiCloudWrite_t)(const void* data, int32 dataSize);

/**
 * struct that gets filled in by s3eIOSiCloudRegister
 */
typedef struct s3eIOSiCloudFuncs
{
    s3eIOSiCloudRegister_t m_s3eIOSiCloudRegister;
    s3eIOSiCloudUnRegister_t m_s3eIOSiCloudUnRegister;
    s3eIOSiCloudStart_t m_s3eIOSiCloudStart;
    s3eIOSiCloudStop_t m_s3eIOSiCloudStop;
    s3eIOSiCloudTick_t m_s3eIOSiCloudTick;
    s3eIOSiCloudWrite_t m_s3eIOSiCloudWrite;
} s3eIOSiCloudFuncs;

static s3eIOSiCloudFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x47c24b3b, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: s3eIOSiCloud");
            
        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x47c24b3b, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool s3eIOSiCloudAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult s3eIOSiCloudRegister(s3eIOSiCloudCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud[0] func: s3eIOSiCloudRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eIOSiCloudRegister(cbid, fn, userData);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eIOSiCloudUnRegister(s3eIOSiCloudCallback cbid, s3eCallback fn)
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud[1] func: s3eIOSiCloudUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eIOSiCloudUnRegister(cbid, fn);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult s3eIOSiCloudStart(const char* fileName, s3eBool supportConflictResolution)
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud[2] func: s3eIOSiCloudStart"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eIOSiCloudStart(fileName, supportConflictResolution);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void s3eIOSiCloudStop()
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud[3] func: s3eIOSiCloudStop"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eIOSiCloudStop();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void s3eIOSiCloudTick()
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud[4] func: s3eIOSiCloudTick"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_s3eIOSiCloudTick();

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

s3eResult s3eIOSiCloudWrite(const void* data, int32 dataSize)
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud[5] func: s3eIOSiCloudWrite"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_s3eIOSiCloudWrite(data, dataSize);

#ifdef LOADER_CALL
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
