/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eIOSiCloud_autodefs.h"
#include "s3eEdk.h"
#include "s3eIOSiCloud.h"
//Declarations of Init and Term functions
extern s3eResult s3eIOSiCloudInit();
extern void s3eIOSiCloudTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult s3eIOSiCloudStart_wrap(const char* fileName, s3eBool supportConflictResolution)
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud func on main thread: s3eIOSiCloudStart"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eIOSiCloudStart, 2, fileName, supportConflictResolution);
}

static void s3eIOSiCloudStop_wrap()
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud func on main thread: s3eIOSiCloudStop"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eIOSiCloudStop, 0);
}

static void s3eIOSiCloudTick_wrap()
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud func on main thread: s3eIOSiCloudTick"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eIOSiCloudTick, 0);
}

static s3eResult s3eIOSiCloudWrite_wrap(const void* data, int32 dataSize)
{
    IwTrace(IOSICLOUD_VERBOSE, ("calling s3eIOSiCloud func on main thread: s3eIOSiCloudWrite"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eIOSiCloudWrite, 2, data, dataSize);
}

#define s3eIOSiCloudStart s3eIOSiCloudStart_wrap
#define s3eIOSiCloudStop s3eIOSiCloudStop_wrap
#define s3eIOSiCloudTick s3eIOSiCloudTick_wrap
#define s3eIOSiCloudWrite s3eIOSiCloudWrite_wrap

#endif

s3eResult s3eIOSiCloudRegister(s3eIOSiCloudCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_IOSICLOUD_HASH, S3E_IOSICLOUD_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eIOSiCloudUnRegister(s3eIOSiCloudCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_IOSICLOUD_HASH, S3E_IOSICLOUD_CALLBACK_MAX, cbid, fn);
}

void s3eIOSiCloudRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[6];
    funcPtrs[0] = (void*)s3eIOSiCloudRegister;
    funcPtrs[1] = (void*)s3eIOSiCloudUnRegister;
    funcPtrs[2] = (void*)s3eIOSiCloudStart;
    funcPtrs[3] = (void*)s3eIOSiCloudStop;
    funcPtrs[4] = (void*)s3eIOSiCloudTick;
    funcPtrs[5] = (void*)s3eIOSiCloudWrite;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[6] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eIOSiCloud", funcPtrs, sizeof(funcPtrs), flags, s3eIOSiCloudInit, s3eIOSiCloudTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eIOSiCloudStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eIOSiCloudRegisterExt;
    return 0;
}

int g_s3eIOSiCloudVal = s3eIOSiCloudStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eIOSiCloudRegisterExt();
}
#endif

#endif
